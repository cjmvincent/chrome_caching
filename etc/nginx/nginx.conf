##### Nginx ChromeOS Cache #####

user www-data;
worker_processes auto;
worker_rlimit_nofile 65535;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;
include '/etc/nginx/modules-enabled/*.conf';

events {
        worker_connections 32000;
}

stream {
        # Set resolvers against DNS servers not used for local interception. You may wish to change these to your ISP's DNS servers, or I have left them to the Oracle of Goog
        resolver 8.8.8.8 8.8.4.4 ipv6=off;

        # Log format for stream
        log_format  stream      'HTTPS [$time_local] $remote_addr $protocol $ssl_preread_server_name:$server_port $status';
        access_log  /var/log/nginx/access.log stream buffer=64k flush=1m;

        server {
                # Pass through SSL connections upstream using SNI preread
                listen 443;
                proxy_buffer_size 16k;
                ssl_preread on;
                proxy_pass "${ssl_preread_server_name}:443";

                # Restrict each client to a set bandwidth - Eg. 1m = 10mbps
                #proxy_download_rate 1m;
                #proxy_upload_rate 1m;

		# Allow only internal networks in case of accidental internet exposure.
		allow 10.0.0.0/8;
		allow 172.16.0.0/12;
		allow 192.168.0.0/16;
		deny all;
        }
}

http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Logging format
        #log_format  main        'HTTP [$time_local] $remote_addr $request_method $host$request_uri $status '
        #                        '"$http_user_agent" "$upstream_cache_status"';
        log_format  main_ext  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$host" sn="$server_name" '
                      'rt=$request_time '
                      'ua="$upstream_addr" us="$upstream_status" '
                      'ut="$upstream_response_time" ul="$upstream_response_length" '
                      'cs=$upstream_cache_status' ;

        access_log /var/log/nginx/access.log main_ext buffer=64k flush=1m;

        # Set resolvers against DNS servers not used for local interception. You may wish to change these to your ISP's DNS servers, or I have left them to the Oracle of Goog
        resolver 8.8.8.8 8.8.4.4 ipv6=off;

        # Global cache paths and variables
        proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=cache:10m max_size=80g inactive=14d use_temp_path=off;

        # Miscellaneous tweaks
        sendfile on;
        tcp_nopush on;
        keepalive_timeout 60;
        keepalive_requests 512;
        client_max_body_size 20G;
        client_body_buffer_size 16M;
        server_names_hash_max_size 1024;

	# Allow only internal networks in case of accidental internet exposure.
	allow 10.0.0.0/8;
	allow 172.16.0.0/12;
	allow 192.168.0.0/16;
	deny all;

        # User agent mappings to no cache rules
        map $http_user_agent $no_cache {
                # Don't cache downloads by Apple caching servers
                ~(swupd_syncd) 1;
                # Set default to cache
                default 0;
        }

        server {
                # Don't cache these zones
                listen 80 default_server;

                # Don't cache Google redirectors
                server_name     redirector.gvt1.com;

                location / {
                        proxy_http_version 1.1;
                        proxy_pass http://${host};
                        proxy_pass_request_headers on;
                        proxy_set_header Host $host;

                        # Restrict proxied downloads - Eg. 1m ~= 10mbps
                        #proxy_buffering on;
                        #proxy_limit_rate 1m;
                }

                # Location of pac file to be hosted
                location /cache_proxy.pac {
                        root /var/www/html;
                        default_type application/x-ns-proxy-autoconfig;
                        access_log off;

                        # Optional: restrict access to your internal networks
                        allow 10.0.0.0/8;
                        allow 172.16.0.0/12;
                        allow 192.168.0.0/16;
                        deny all;
                }

        }

        server {
                # Aggressive caching for clustered nodes
                listen 80;

                server_name     *.gvt1.com;

                ignore_invalid_headers off;

                proxy_cache cache;
                proxy_cache_valid 200 206 30d;

                # Check if caching should be ignored against user-agent cache map
                proxy_no_cache $no_cache;

                #Only cache GET request methods
                proxy_cache_methods GET;

                # Slice downloads into 16MB pieces
                slice 16M;

                # Lock cache objects until the 16MB piece is retrieved
                proxy_cache_lock on;

                # Wait 600 seconds for 16MB piece to arrive
                proxy_cache_lock_timeout 600s;
                proxy_cache_lock_age 600s;

                # Aggressive caching
                proxy_cache_key "$request_method|$uri|$slice_range";

                proxy_cache_use_stale updating;

                location / {
                        proxy_http_version 1.1;
                        proxy_pass http://${host};
                        proxy_pass_request_headers on;
                        proxy_set_header Host $host;
                        proxy_set_header Range $slice_range;
                        proxy_set_header Upgrade-Insecure-Requests "";
                        proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie Vary;
                        proxy_hide_header ETag;

                        # Restrict proxied downloads - Eg. 1m ~= 10mbps
                        #proxy_buffering on;
                        #proxy_limit_rate 1m;
                }
        }

        server {
                # Default caching
                listen 80;

                server_name     dl.google.com;

                ignore_invalid_headers off;

                proxy_cache cache;
                proxy_cache_valid 200 206 30d;

                # Check if caching should be ignored against user-agent cache map
                proxy_no_cache $no_cache;

                # Only cache GET request methods
                proxy_cache_methods GET;

                # Slice downloads into 16MB pieces
                slice 16M;

                # Lock cache objects until the 16MB piece is retrieved
                proxy_cache_lock on;

                # Wait 600 seconds for 16MB piece to arrive
                proxy_cache_lock_timeout 600s;
                proxy_cache_lock_age 600s;

                # Standard caching  
                proxy_cache_key "$request_method|$host$uri|$slice_range";

                proxy_cache_use_stale updating;

                location / { 
                        proxy_http_version 1.1;
                        proxy_pass http://${host};
                        proxy_pass_request_headers on;
                        proxy_set_header Host $host;
                        proxy_set_header Range $slice_range;
                        proxy_set_header Upgrade-Insecure-Requests "";
                        proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie Vary;
                        proxy_hide_header ETag;

                        # Restrict proxied downloads - Eg. 1m ~= 10mbps
                        #proxy_buffering on;
                        #proxy_limit_rate 1m;
                }
        }

	server {
		listen 127.0.0.1:8080;

		location /nginx_status {
			stub_status on;
			access_log off;
			allow 127.0.0.1;
			deny all;
		}
	}
}
